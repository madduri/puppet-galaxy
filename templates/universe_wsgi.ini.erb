#
# Galaxy is configured by default to be useable in a single-user development
# environment.  To tune the application for a multi-user production
# environment, see the documentation at:
#
# http://wiki.g2.bx.psu.edu/Admin/Config/Performance/Production%20Server
#

# Throughout this sample configuration file, except where stated otherwise,
# uncommented values override the default if left unset, whereas commented
# values are set to the default value.
# Examples of many of these options are explained in more detail in the wiki:
#
# http://wiki.g2.bx.psu.edu/Admin/Config
#
# Config hackers are encouraged to check there before asking for help.

# ---- HTTP Server ----------------------------------------------------------

# Configuration of the internal HTTP server.

#	[server:main]
#	
#	# The internal HTTP server to use.  Currently only Paste is provided.  This
#	# option is required.
#	use = egg:Paste#http
#	
#	# The port on which to listen.
#	port = 8081
#	
#	# The address on which to listen.  By default, only listen to localhost (Galaxy
#	# will not be accessible over the network).  Use '0.0.0.0' to listen on all
#	# available network interfaces.
#	host = 0.0.0.0
#	
#	# Use a threadpool for the web server instead of creating a thread for each
#	# request.
#	use_threadpool = True
#	
#	# Number of threads in the web server thread pool.
#	threadpool_workers = 10
#	
#	# Set the number of seconds a thread can work before you should kill it (assuming it will never finish) to 3 hours.
#	threadpool_kill_thread_limit = 10800


<% for i in @number_of_background_workers do %>
  [server:web<%= i %>]
  use=egg:Paste#http
  port=<%= @handler_starting_port_number.to_i + i %>
  host=<%= @handler_host_to_listen_on %>
  use_threadpool=true
  threadpool_workers=<%= @handler_threadpool_workers %>

<% end %>

<% for i in @number_of_web_workers do %>
  [server:handler<%= i %>]
  use=egg:Paste#http
  port=<%= @webworker_starting_port_number.to_i + i %>
  host=<%= @webworker_host_to_listen_on %>
  use_threadpool=true
  threadpool_workers=<%= @webworker_threadpool_workers %>
<% end %>


# ---- Filters --------------------------------------------------------------
# Filters sit between Galaxy and the HTTP server.
# These filters are disabled by default.  They can be enabled with
# 'filter-with' in the [app:main] section below.

# Define the gzip filter.
[filter:gzip]
use = egg:Paste#gzip

# Define the proxy-prefix filter.
[filter:proxy-prefix]
use = egg:PasteDeploy#prefix
<% if @use_prefix %>
prefix = <%= @proxy_prefix %>
<% end %>

# ---- Galaxy ---------------------------------------------------------------

# Configuration of the Galaxy application.

[app:main]

# Filtering

<% Array(@filters).each do |filter| %>
<%= filter['type'] %> = <% filter['python_class'] %>
<% end  %>

# -- Application and filtering

# The factory for the WSGI application.  This should not be changed.
paste.app_factory = galaxy.web.buildapp:app_factory

# If running behind a proxy server and Galaxy is served from a subdirectory,
# enable the proxy-prefix filter and set the prefix in the
# [filter:proxy-prefix] section above.
<% if @use_prefix %>
filter-with = proxy-prefix
<% end %>

# If proxy-prefix is enabled and you're running more than one Galaxy instance
# behind one hostname, you will want to set this to the same path as the prefix
# in the filter above.  This value becomes the "path" attribute set in the
# cookie so the cookies from each instance will not clobber each other.
<% if @use_prefix %>
cookie_path = <%= @proxy_prefix %>
<% end %>


# -- Database
database_connection=<%= @db_driver%>://<%= @db_username %>:<%= @db_password %>@<%= @db_host%>:<%= @db_port %>/<%= @db_database %>
database_engine_option_pool_size = <%= @db_opts_pool_size%>
database_engine_option_max_overflow = <%= @db_opts_max_overflow%>

<% if @db_driver.eql?"mysql" %>
# If using MySQL and the server logs the error "MySQL server has gone away",
# you will want to set this to some positive value (7200 should work).
database_engine_option_pool_recycle = -1
<% end %>

<% if @db_driver.eql?"postgresql" %>
# If large database query results are causing memory or response time issues in
# the Galaxy process, leave the result on the server instead.  This option is
# only available for PostgreSQL and is highly recommended.
database_engine_option_server_side_cursors = True
<% end %>

<% if !@db_driver.eql?"sqlite" %>
# Create only one connection to the database per thread, to reduce the
# connection overhead.  Recommended when not using SQLite:
database_engine_option_strategy = threadlocal
<% end %>

<% if @database_query_profiling_proxy %>
# Log all database transactions, can be useful for debugging and performance
# profiling.  Logging is done via Python's 'logging' module under the qualname
# 'galaxy.model.orm.logging_connection_proxy'
database_query_profiling_proxy = True
<% else %>
database_query_profiling_proxy = False
<% end %>

# -- Files and directories

# Path where genome builds are stored. This defaults to tool-data/genome
#genome_data_path = tool-data/genome

# URL for rsync server to download pre-built indexes.
#rsync_url = rsync://scofield.bx.psu.edu/indexes

# Dataset files are stored in this directory.
file_path = <%= @file_path%>

# Temporary files are stored in this directory.
new_file_path = <%= @tmp_file_dir %>

# Tool config files, defines what tools are available in Galaxy.
# Tools can be locally developed or installed from Galaxy tool sheds.
tool_config_file = <%= Array(@tool_config_files).join(",") %>

# Default path to the directory containing the tools defined in tool_conf.xml.
# Other tool config files must include the tool_path as an attribute in the <toolbox> tag.
#tool_path = tools

# Path to the directory in which managed tool dependencies are placed.  To use
# the dependency system, see the documentation at:
# http://wiki.g2.bx.psu.edu/Admin/Config/Tool%20Dependencies
tool_dependency_dir = <%= @tool_dependency_dir %>

# Enable automatic polling of relative tool sheds to see if any updates
# are available for installed repositories.  Ideally only one Galaxy 
# server process should be able to check for repository updates.  The
# setting for hours_between_check should be an integer between 1 and 24.
#enable_tool_shed_check = False
#hours_between_check = 12

# XML config file that contains data table entries for the ToolDataTableManager. This file is manually
# maintained by the Galaxy administrator.
#tool_data_table_config_path = tool_data_table_conf.xml

# XML config file that contains additional data table entries for the ToolDataTableManager.  This file
# is automatically generated based on the current installed tool shed repositories that contain valid
# tool_data_table_conf.xml.sample files.  At the time of installation, these entries are automatically
# added to the following file, which is parsed and applied to the ToolDataTableManager at server start up.
#shed_tool_data_table_config = shed_tool_data_table_conf.xml

# Directory where data used by tools is located, see the samples in that
# directory and the wiki for help:
# http://wiki.g2.bx.psu.edu/Admin/Data%20Integration
#tool_data_path = tool-data

# Directory where chrom len files are kept, currently mainly used by trackster
#len_file_path = tool-data/shared/ucsc/chrom

# Datatypes config file, defines what data (file) types are available in
# Galaxy.
#datatypes_config_file = datatypes_conf.xml

# Visualizations config directory, where to look for individual visualization
# xml configuration files. Those files define how visualizations apply to
# particular data and how to pass them the necessary parameters
visualizations_config_directory = config/visualizations

# Each job is given a unique empty directory as its current working directory.
# This option defines in what parent directory those directories will be
# created.
#job_working_directory = database/job_working_directory

# If using a cluster, Galaxy will write job scripts and stdout/stderr to this
# directory.
#cluster_files_directory = database/pbs

# External service types config file, defines what types of external_services configurations 
# are available in Galaxy.
#external_service_type_config_file = external_service_types_conf.xml

# Path to the directory containing the external_service_types defined in the config.
#external_service_type_path = external_service_types

# Tools with a number of outputs not known until runtime can write these
# outputs to a directory for collection by Galaxy when the job is done.
# Previously, this directory was new_file_path, but using one global directory
# can cause performance problems, so using job_working_directory ('.' or cwd
# when a job is run) is encouraged.  By default, both are checked to avoid
# breaking existing tools.
#collect_outputs_from = new_file_path,job_working_directory



<% if @smtp_server %>
# -- Mail and notification

# Galaxy sends mail for various things: Subscribing users to the mailing list
# if they request it, emailing password resets, notification from the Galaxy
# Sample Tracking system, and reporting dataset errors.  To do this, it needs
# to send mail through an SMTP server, which you may define here (host:port).
# Galaxy will automatically try STARTTLS but will continue upon failure.
smtp_server = <%= @smtp_server %>

# If your SMTP server requires a username and password, you can provide them
# here (password in cleartext here, but if your server supports STARTTLS it
# will be sent over the network encrypted).
<% if @smtp_username %>
smtp_username = <%= @smtp_username %>
<% end %>
<% if @smtp_password %>
smtp_password = <%= @smtp_password %>
<% end %>

<% end %>
# On the user registration form, users may choose to join the mailing list.
# This is the address of the list they'll be subscribed to.
#mailing_join_addr = galaxy-announce-join@bx.psu.edu

# Datasets in an error state include a link to report the error.  Those reports
# will be sent to this address.  Error reports are disabled if no address is set.
error_email_to = <% @admin_email %>

# -- Display sites
# Galaxy can display data at various external browsers.  These options specify
# which browsers should be available.  URLs and builds available at these
# browsers are defined in the specifield files.

# UCSC browsers: tool-data/shared/ucsc/ucsc_build_sites.txt
#ucsc_display_sites = main,test,archaea,ucla

# GBrowse servers: tool-data/shared/gbrowse/gbrowse_build_sites.txt
#gbrowse_display_sites = modencode,sgd_yeast,tair,wormbase,wormbase_ws120,wormbase_ws140,wormbase_ws170,wormbase_ws180,wormbase_ws190,wormbase_ws200,wormbase_ws204,wormbase_ws210,wormbase_ws220,wormbase_ws225

# GeneTrack servers: tool-data/shared/genetrack/genetrack_sites.txt
#genetrack_display_sites = main,test

# If use_remote_user = True, display application servers will be denied access
# to Galaxy and so displaying datasets in these sites will fail.
# display_servers contains a list of hostnames which should be allowed to
# bypass security to display datasets.  Please be aware that there are security
# implications if this is allowed.  More details (including required changes to
# the proxy server config) are available in the Apache proxy documentation on
# the wiki.
#
# The list of servers in this sample config are for the UCSC Main, Test and
# Archaea browsers, but the default if left commented is to not allow any
# display sites to bypass security (you must uncomment the line below to allow
# them).
#display_servers = hgw1.cse.ucsc.edu,hgw2.cse.ucsc.edu,hgw3.cse.ucsc.edu,hgw4.cse.ucsc.edu,hgw5.cse.ucsc.edu,hgw6.cse.ucsc.edu,hgw7.cse.ucsc.edu,hgw8.cse.ucsc.edu,lowepub.cse.ucsc.edu

# To disable the old-style display applications that are hardcoded into datatype classes,
# set enable_old_display_applications = False.
# This may be desirable due to using the new-style, XML-defined, display applications that
# have been defined for many of the datatypes that have the old-style.
# There is also a potential security concern with the old-style applications,
# where a malicious party could provide a link that appears to reference the Galaxy server,
# but contains a redirect to a third-party server, tricking a Galaxy user to access said
# site.
#enable_old_display_applications = True

# -- Next gen LIMS interface on top of existing Galaxy Sample/Request management code.

use_nglims = False
nglims_config_file = tool-data/nglims.yaml

# -- UI Localization

# Show a message box under the masthead.
#message_box_visible = False
#message_box_content = None
#message_box_class = info

<% if @ui_branding %>
# Append "/{brand}" to the "Galaxy" text in the masthead.
brand = <%= @branding %>
<% end %>

<% if @ui_welcome_url %>
# The URL of the page to display in Galaxy's middle pane when loaded. This can be 
# an absolute or relative URL.
welcome_url = <%= @ui_welcome_url %>
<% end %>
<% if @ui_logo_url %>
# The URL linked by the "Galaxy/brand" text.
logo_url = <%= @ui_logo_url %>
<% end %>

<% if @ui_extra_wiki_url %>
# The URL linked by the "Galaxy Wiki" link in the "Help" menu.
wiki_url = <%= @ui_extra_wiki_url %>
<% end %>
<% if @ui_extra_support_url %>
# The URL linked by the "Support" link in the "Help" menu.
support_url = <%= @ui_extra_support_url %>
<% end %>
<% if @ui_extra_citation_url %>
# The URL linked by the "How to Cite..." link in the "Help" menu.
citation_url = <%= @ui_extra_citation_url %> 
<% end %>
<% if @ui_extra_terms_url %>
# The URL linked by the "Terms and Conditions" link in the "Help" menu, as well
# as on the user registration and login forms.
terms_url = <%= @ui_extra_terms_url %>
<% end %>

# Serve static content, which must be enabled if you're not serving it via a
# proxy server.  These options should be self explanatory and so are not
# documented individually.  You can use these paths (or ones in the proxy
# server) to point to your own styles.
static_enabled = True
static_cache_time = 360
static_dir = %(here)s/static/
static_images_dir = %(here)s/static/images
static_favicon_dir = %(here)s/static/favicon.ico
static_scripts_dir = %(here)s/static/scripts/
static_style_dir = %(here)s/static/june_2007_style/blue
static_robots_txt = %(here)s/static/robots.txt

# Pack javascript at launch (/static/scripts/*.js)
# This only happens if the modified timestamp of the source .js is newer
# than the version (if it exists) in /static/scripts/packed/
# Note that this requires java > 1.4 for executing yuicompressor.jar
#pack_scripts = False

# Cloud Launch
<% if @cloud_enable_launch %>
enable_cloud_launch = True
cloudlaunch_default_ami = <%= @cloud_ami %>
<% end %>
<%#
# -- Advanced proxy features

# For help on configuring the Advanced proxy features, see:
# http://usegalaxy.org/production
%>
<% if @webserver.eql?"apache" %>
# Apache can handle file downloads (Galaxy-to-user) via mod_xsendfile.  Set
# this to True to inform Galaxy that mod_xsendfile is enabled upstream.
  <% if @xsendfile %>
apache_xsendfile = True
  <% end %>
<% else if @webserver.eql?"nginx" %>
  <% if @x_accel_redirect %>
# The same download handling can be done by nginx using X-Accel-Redirect.  This
# should be set to the path defined in the nginx config as an internal redirect
# with access to Galaxy's data files (see documentation linked above).
nginx_x_accel_redirect_base = True
  <% end %>
  <% if @x_archive_files %>
# nginx can make use of mod_zip to create zip files containing multiple library
# files.  If using X-Accel-Redirect, this can be the same value as that option.
nginx_x_archive_files_base = True
  <% end %>
  <% if @nginx_upload_store %>
# nginx can also handle file uploads (user-to-Galaxy) via nginx_upload_module.
# Configuration for this is complex and explained in detail in the
# documentation linked above.  The upload store is a temporary directory in
# which files uploaded by the upload module will be placed.
#nginx_upload_store = True
  <% end %>

  <% if @nginx_upload_path %>
# This value overrides the action set on the file upload form, e.g. the web
# path where the nginx_upload_module has been configured to intercept upload
# requests.
#nginx_upload_path = True
  <% end %>
<% end %>
<% end %>

<% if @upstream_gzip %>
# If using compression in the upstream proxy server, use this option to disable
# gzipping of library .tar.gz and .zip archives, since the proxy server will do
# it faster on the fly.
upstream_gzip = true
<% end %>


# -- Logging and Debugging

# Verbosity of console log messages.  Acceptable values can be found here:
# http://docs.python.org/library/logging.html#logging-levels
log_level = <%= @log_level %>
<% if @database_engine_option_echo %>
# Print database operations to the server log (warning, quite verbose!).
database_engine_option_echo = True
<% end %>
<% if @database_engine_option_echo_pool %>
# Print database pool operations to the server log (warning, quite verbose!).
database_engine_option_echo_pool = True
<% end %>
<% if @log_events  %>
# Turn on logging of application events and some user events to the database.
log_events = True
<% end %>
<% if @log_actions %>
# Turn on logging of user actions to the database. Actions currently logged are
# grid views, tool searches, and use of "recently" used tools menu.  The
# log_events and log_actions functionality will eventually be merged.
log_actions = True
<% end %>
<% if @sanitize_all_html %>
# Sanitize All HTML Tool Output
# By default, all tool output served as 'text/html' will be sanitized
# thoroughly. This can be disabled if you have special tools that require
# unaltered output.
sanitize_all_html = True
<% end %>
<% if @debug_enable %>
# Debug enables access to various config options useful for development and
# debugging: use_lint, use_profile, use_printdebug and use_interactive.  It
# also causes the files used by PBS/SGE (submission script, output, and error)
# to remain on disk after the job is complete.  Debug mode is disabled if
# commented, but is uncommented by default in the sample config.
debug = True
<% end %>
<% if  @debug_wsgi_lint %>
# Check for WSGI compliance.
use_lint = True
<% end %>
<% if @debug_use_profile  %>
# Run the Python profiler on each request.
use_profile = True
<% end %>
<% if  @debug_use_printdebug %>
# Intercept print statements and show them on the returned page.
use_printdebug = True
<% end %>
<% if @debug_use_interactive  %>
# Enable live debugging in your browser.  This should NEVER be enabled on a
# public site.  Enabled in the sample config for development.
use_interactive = True
<% end %>
<% if @debug_use_heartbeat %>
# Write thread status periodically to 'heartbeat.log',  (careful, uses disk
# space rapidly!).  Useful to determine why your processes may be consuming a
# lot of CPU.
use_heartbeat = True
<% end %>
<% if @debug_use_memdump %>
# Enable the memory debugging interface (careful, negatively impacts server
# performance).
use_memdump = True
<% end %>
<%#
# -- Data Libraries

# These library upload options are described in much more detail in the wiki:
# http://wiki.g2.bx.psu.edu/Admin/Data%20Libraries/Uploading%20Library%20Files
%>
<% if !@library_import_dir.eql?"None" %>
# Add an option to the library upload form which allows administrators to
# upload a directory of files.
library_import_dir = <% @library_import_dir %>
<% end %>
<% if !@user_library_import_dir.eql?"None" %>
# Add an option to the library upload form which allows authorized
# non-administrators to upload a directory of files.  The configured directory
# must contain sub-directories named the same as the non-admin user's Galaxy
# login ( email ).  The non-admin user is restricted to uploading files or
# sub-directories of files contained in their directory.
user_library_import_dir = <% @user_library_import_dir %>
<% end %>
<% if @allow_library_path_paste %>
# Add an option to the admin library upload tool allowing admins to paste
# filesystem paths to files and directories in a box, and these paths will be
# added to a library.  Set to True to enable.  Please note the security
# implication that this will give Galaxy Admins access to anything your Galaxy
# user has access to.
allow_library_path_paste = True
<% end %>

<% if @disable_library_comptypes.size > 0 %>
# Users may choose to download multiple files from a library in an archive.  By
# default, Galaxy allows users to select from a few different archive formats
# if testing shows that Galaxy is able to create files using these formats.
# Specific formats can be disabled with this option, separate more than one
# format with commas.  Available formats are currently 'zip', 'gz', and 'bz2'.
disable_library_comptypes = <%= Array(@disable_library_comptypes).join(",") %>
<% end %>

<% if @use_transfer_manager %>
# Some sequencer integration features in beta allow you to automatically
# transfer datasets.  This is done using a lightweight transfer manager which
# runs outside of Galaxy (but is spawned by it automatically).  Galaxy will
# communicate with this manager over the port specified here.
transfer_manager_port = <% @transfer_manager_port %>
<% end %>
<% if @data_search_with_whoosh %>
# Search data libraries with whoosh
enable_whoosh_library_search = True
# Whoosh indexes are stored in this directory.
whoosh_index_dir = <%= @whoosh_index_dir %>
<% end %>
<% if @data_search_with_lucene %>
# Search data libraries with lucene
enable_lucene_library_search = True
# maxiumum file size to index for searching, in MB
fulltext_max_size = <%= @lucene_fulltext_max_size %>
fulltext_noindex_filetypes=<%= Array(@lucene_fulltext_noindex_filetypes).join(",") %>
# base URL of server providing search functionality using lucene
fulltext_url = <%= @lucene_fulltext_url %>
<% end %>
# -- Users and Security

# Galaxy encodes various internal values when these values will be output in
# some format (for example, in a URL or cookie).  You should set a key to be
# used by the algorithm that encodes and decodes these values.  It can be any
# string.  If left unchanged, anyone could construct a cookie that would grant
# them access to others' sessions.
id_secret = <%= @id_secret %>

<% if @use_remote_user %>
# User authentication can be delegated to an upstream proxy server (usually
# Apache).  The upstream proxy should set a REMOTE_USER header in the request.
# Enabling remote user disables regular logins.  For more information, see:
# http://wiki.g2.bx.psu.edu/Admin/Config/Apache%20Proxy
use_remote_user = True

# If use_remote_user is enabled and your external authentication
# method just returns bare usernames, set a default mail domain to be appended
# to usernames, to become your Galaxy usernames (email addresses).
remote_user_maildomain = <%= @remote_user_maildomain %>

# If use_remote_user is enabled, you can set this to a URL that will log your
# users out.
remote_user_logout_href = <%= @remote_user_logout_href %>
<% end %>

<% if @admin_users.size > 0 %>
# Administrative users - set this to a comma-separated list of valid Galaxy
# users (email addresses).  These users will have access to the Admin section
# of the server, and will have access to create users, groups, roles,
# libraries, and more.  For more information, see:
# http://wiki.g2.bx.psu.edu/Admin/Interface
admin_users = <%= Array(@admin_users).join(",") %>
<% end %>
<% if @require_login %>
# force everyone to log in (disable anonymous access).
require_login = True
<% end %>
<% if @allow_user_creation %>
# allow unregistered users to create new accounts (otherwise, they will have to
# be created by an admin).
allow_user_creation = True
<% end %>
<% if @allow_user_deletion %>
# allow administrators to delete accounts.
allow_user_deletion = True
<% end %>
<% if @allow_user_impersonation %>
# allow administrators to log in as other users (useful for debugging)
allow_user_impersonation = True
<% end %>
<% if @allow_user_dataset_purge %>
# allow users to remove their datasets from disk immediately (otherwise,
# datasets will be removed after a time period specified by an administrator in
# the cleanup scripts run via cron)
allow_user_dataset_purge = True
<% end %>
<% if @new_user_dataset_access_role_default_private %>
# by default, users' data will be public, but setting this to true will cause
# it to be private.  does not affect existing users and data, only ones created
# after this option is set.  users may still change their default back to
# public.
new_user_dataset_access_role_default_private = True
<% end %>

# -- beta features

# object store mode (valid options are: disk, s3, swift, distributed, hierarchical)
#object_store = disk
#os_access_key = <your cloud object store access key>
#os_secret_key = <your cloud object store secret key>
#os_bucket_name = <name of an existing object store bucket or container>
# if using 'swift' object store, you must specify the following connection properties
#os_host = swift.rc.nectar.org.au
#os_port = 8888
#os_is_secure = false
#os_conn_path = /
# reduced redundancy can be used only with the 's3' object store
#os_use_reduced_redundancy = false
# size (in gb) that the cache used by object store should be limited to.
# if the value is not specified, the cache size will be limited only by the
# file system size. the file system location of the cache is considered the
# configuration of the ``file_path`` directive defined above.
#object_store_cache_size = 100

# configuration file for the distributed object store, if object_store =
# distributed.  see the sample at distributed_object_store_conf.xml.sample
#distributed_object_store_config_file = none

# enable galaxy to communicate directly with a sequencer
#enable_sequencer_communication = false

<% if @enable_openid %>
# enable authentication via openid.  allows users to log in to their galaxy
# account by authenticating with an openid provider.
enable_openid = True
openid_config_file = <%= @openid_config_file %>
<% end %>
<% if @allow_user_impersonation and @admin_users.size > 0%>
# optional list of email addresses of api users who can make calls on behalf of
# other users
api_allow_run_as = <%= array(@admin_users).join(",") %>
<% end %>

# enable tool tags (associating tools with tags).  this has its own option
# since its implementation has a few performance implications on startup for
# large servers.
#enable_tool_tags = false

# enable a feature when running workflows. when enabled, default datasets
# are selected for "set at runtime" inputs from the history such that the
# same input will not be selected twice, unless there are more inputs than
# compatible datasets in the history.
# when false, the most recently added compatible item in the history will
# be used for each "set at runtime" input, independent of others in the workflow
#enable_unique_workflow_defaults = false

# the url to the myexperiment instance being used (omit scheme but include port)
#myexperiment_url = www.myexperiment.org:80

<% if @enable_ftp_upload %>
# enable galaxy's "upload via ftp" interface.  you'll need to install and
# configure an ftp server (we've used proftpd since it can use galaxy's
# database for authentication) and set the following two options.

# this should point to a directory containing subdirectories matching users'
# email addresses, where galaxy will look for files.
ftp_upload_dir = <%= @ftp_upload_dir %>

# this should be the hostname of your ftp server, which will be provided to
# users in the help text.
ftp_upload_site = <%= @ftp_upload_site %>
<% end %>
<% if @enable_quotas %>
# enable enforcement of quotas.  quotas can be set from the admin interface.
enable_quotas = True
<% end %>

# enable a feature when running workflows. when enabled, default datasets
# are selected for "set at runtime" inputs from the history such that the
# same input will not be selected twice, unless there are more inputs than
# compatible datasets in the history.
# when false, the most recently added compatible item in the history will
# be used for each "set at runtime" input, independent of others in the workflow
#enable_unique_workflow_defaults = false

# this option allows users to see the full path of datasets via the "view
# details" option in the history.  administrators can always see this.
#expose_dataset_path = false

# data manager configuration options
# allow non-admin users to view available data manager options
#enable_data_manager_user_view = false
# file where data managers are configured
#data_manager_config_file = data_manager_conf.xml
# file where tool shed based data managers are configured 
#shed_data_manager_config_file = shed_data_manager_conf.xml
# directory to store data manager based tool-data; defaults to tool_data_path
#galaxy_data_manager_data_path = tool-data

# -- job execution
# to increase performance of job execution and the web interface, you can
# separate galaxy into multiple processes.  there are more than one way to do
# this, and they are explained in detail in the documentation:
#
#   http://wiki.g2.bx.psu.edu/admin/config/performance/web%20application%20scaling
#
# by default, galaxy manages and executes jobs from within a single process and
# notifies itself of new jobs via in-memory queues.  jobs are run locally on
# the system on which galaxy is started.  advanced job running capabilities can
# be configured through the job configuration file.
#job_config_file = <%= @job_config_file %>

<% if @number_of_background_workers.size+@number_of_web_workers.size > 2 %>
# in multiprocess configurations, notification between processes about new jobs
# is done via the database.  in single process configurations, this is done in
# memory, which is a bit quicker.  galaxy tries to automatically determine
# which method it should used based on your handler configuration in the job
# config file, but you can explicitly override this behavior by setting the
# following option to true or false.
track_jobs_in_database = True
<% else %>
track_jobs_in_database = False
<% end %>

# this enables splitting of jobs into tasks, if specified by the particular tool config.
# this is a new feature and not recommended for production servers yet.
#use_tasked_jobs = false
#local_task_queue_workers = 2

<% if @enable_job_recovery %>
# enable job recovery (if galaxy is restarted while cluster jobs are running,
# it can "recover" them when it starts).  this is not safe to use if you are
# running more than one galaxy server using the same database.
enable_job_recovery = True
<% end %>

<% if @retry_metadata_internally %>
# although it is fairly reliable, setting metadata can occasionally fail.  in
# these instances, you can choose to retry setting it internally or leave it in
# a failed state (since retrying internally may cause the galaxy process to be
# unresponsive).  if this option is set to false, the user will be given the
# option to retry externally, or set metadata manually (when possible).
retry_metadata_internally = True
<% else %>
retry_metadata_internally = False
<% end %>

<% if @outputs_to_working_directory %>
# if (for example) you run on a cluster and your datasets (by default,
# database/files/) are mounted read-only, this option will override tool output
# paths to write outputs to the working directory instead, and the job manager
# will move the outputs to their proper place in the dataset directory on the
# galaxy server after the job completes.
outputs_to_working_directory = True
<% end %>

<% if Integer(@retry_job_output_collection) > 0 %>
# if your network filesystem's caching prevents the galaxy server from seeing
# the job's stdout and stderr files when it completes, you can retry reading
# these files.  the job runner will retry the number of times specified below,
# waiting 1 second between tries.  for nfs, you may want to try the -noac mount
# option (linux) or -actimeo=0 (solaris).
retry_job_output_collection = <%= @retry_job_output_collection %>
<% end %>

# clean up various bits of jobs left on the filesystem after completion.  these
# bits include the job working directory, external metadata temporary files,
# and drm stdout and stderr files (if using a drm).  possible values are:
# always, onsuccess, never
cleanup_job = <%= @cleanup_job %>

<% if !@environment_setup_file.eql?"None" %>
# file to source to set up the environment when running jobs.  by default, the
# environment in which the galaxy server starts is used when running jobs
# locally, and the environment set up per the drm's submission method and
# policy is used when running jobs on a cluster (try testing with `qsub` on the
# command line).  environment_setup_file can be set to the path of a file on
# the cluster that should be sourced by the user to set up the environment
# prior to running tools.  this can be especially useful for running jobs as
# the actual user, to remove the need to configure each user's environment
# individually.  this only affects cluster jobs, not local jobs.
environment_setup_file = <%= @environment_setup_file %>
<% end %>

<% if @cache_user_job_count %>
# if using job concurrency limits (configured in job_config_file), several
# extra database queries must be performed to determine the number of jobs a
# user has dispatched to a given destination.  by default, these queries will
# happen for every job that is waiting to run, but if cache_user_job_count is
# set to true, it will only happen once per iteration of the handler queue.
# although better for performance due to reduced queries, the tradeoff is a
# greater possibility that jobs will be dispatched past the configured limits
# if running many handlers.
cache_user_job_count = True
<% end %>
# ---- Galaxy Message Queue -------------------------------------------------

[galaxy_amqp]
<% if @use_amqp_server %>
# Galaxy uses AMQ protocol to receive messages from external sources like 
# bar code scanners. Galaxy has been tested against RabbitMQ AMQP implementation.
# For Galaxy to receive messages from a message queue the RabbitMQ server has 
# to be set up with a user account and other parameters listed below. The 'host'
# and 'port' fields should point to where the RabbitMQ server is running. 
host = <%= @amqp_host %>
port = <%= @amqp_port %>
userid = <%= @amqp_userid %>
password = <%= @amqp_password %>
virtual_host = <%= @amqp_virtual_host %>
queue = <%= @amqp_queue %>
exchange = <%= @amqp_exchange %>
routing_key = <%= @amqp_routing_key %>
ctl_path = <%= @amqp_ctl_path %>
<% end %>
